[{"D:\\data-science\\bit-react\\bitflix\\src\\index.js":"1","D:\\data-science\\bit-react\\bitflix\\src\\components\\App.js":"2","D:\\data-science\\bit-react\\bitflix\\src\\components\\GlobalStyles.js":"3","D:\\data-science\\bit-react\\bitflix\\src\\components\\Router.js":"4","D:\\data-science\\bit-react\\bitflix\\src\\components\\Header.js":"5","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Detail\\index.js":"6","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Home\\index.js":"7","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Search\\index.js":"8","D:\\data-science\\bit-react\\bitflix\\src\\routes\\TV\\index.js":"9","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Detail\\DetailContainer.js":"10","D:\\data-science\\bit-react\\bitflix\\src\\routes\\TV\\TvContainer.js":"11","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Home\\HomeContainer.js":"12","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Search\\SearchContainer.js":"13","D:\\data-science\\bit-react\\bitflix\\src\\components\\Message.js":"14","D:\\data-science\\bit-react\\bitflix\\src\\api.js":"15","D:\\data-science\\bit-react\\bitflix\\src\\components\\Loader.js":"16","D:\\data-science\\bit-react\\bitflix\\src\\routes\\TV\\TvPresenter.js":"17","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Home\\HomePresenter.js":"18","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Search\\SearchPresenter.js":"19","D:\\data-science\\bit-react\\bitflix\\src\\components\\Poster.js":"20","D:\\data-science\\bit-react\\bitflix\\src\\components\\Section.js":"21","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Detail\\DetailPresenter.js":"22"},{"size":157,"mtime":1606982261154,"results":"23","hashOfConfig":"24"},{"size":185,"mtime":1606960544989,"results":"25","hashOfConfig":"24"},{"size":610,"mtime":1607576555946,"results":"26","hashOfConfig":"24"},{"size":926,"mtime":1606982524532,"results":"27","hashOfConfig":"24"},{"size":1878,"mtime":1607563884505,"results":"28","hashOfConfig":"24"},{"size":85,"mtime":1606961270633,"results":"29","hashOfConfig":"24"},{"size":79,"mtime":1606961270849,"results":"30","hashOfConfig":"24"},{"size":85,"mtime":1606961270823,"results":"31","hashOfConfig":"24"},{"size":73,"mtime":1606961262636,"results":"32","hashOfConfig":"24"},{"size":1751,"mtime":1607505834840,"results":"33","hashOfConfig":"24"},{"size":1166,"mtime":1606961270633,"results":"34","hashOfConfig":"24"},{"size":2157,"mtime":1606961270849,"results":"35","hashOfConfig":"24"},{"size":2255,"mtime":1606961270774,"results":"36","hashOfConfig":"24"},{"size":570,"mtime":1606960476580,"results":"37","hashOfConfig":"24"},{"size":1052,"mtime":1606982429657,"results":"38","hashOfConfig":"24"},{"size":383,"mtime":1606960544989,"results":"39","hashOfConfig":"24"},{"size":2742,"mtime":1606961270633,"results":"40","hashOfConfig":"24"},{"size":2726,"mtime":1607584973569,"results":"41","hashOfConfig":"24"},{"size":2671,"mtime":1606961270822,"results":"42","hashOfConfig":"24"},{"size":2448,"mtime":1607580790498,"results":"43","hashOfConfig":"24"},{"size":775,"mtime":1607576627349,"results":"44","hashOfConfig":"24"},{"size":3457,"mtime":1607582795203,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1715ml3",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\data-science\\bit-react\\bitflix\\src\\index.js",[],["95","96"],"D:\\data-science\\bit-react\\bitflix\\src\\components\\App.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\components\\GlobalStyles.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\components\\Router.js",["97"],"import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\n\r\nimport Home from \"../routes/Home\";\r\nimport TV from \"../routes/TV\";\r\nimport Search from \"../routes/Search\";\r\nimport Detail from \"../routes/Detail\";\r\n\r\n// 오로지 라우터만 관리하는 컴포넌트가 될 것이다.\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      {/* 기본적으로 Switch가 없이 라우터를 배치하면 모든 라우터를 탄다.\r\n        Switch를 활용하면 오로지 하나의 라우터만 타게 된다.\r\n      */}\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" component={TV} />\r\n        <Route path=\"/search\" component={Search} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n        <Route path=\"/show/:id\" component={Detail} />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n","D:\\data-science\\bit-react\\bitflix\\src\\components\\Header.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\Detail\\index.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\Home\\index.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\Search\\index.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\TV\\index.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\Detail\\DetailContainer.js",["98"],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\TV\\TvContainer.js",["99"],"import React from \"react\";\r\nimport TvPresenter from \"./TvPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n\r\n      this.setState({\r\n        topRated,\r\n        popular,\r\n        airingToday,\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: \"Can't find TV information\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n\r\n    return (\r\n      <TvPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Home\\HomeContainer.js",["100","101"],"import React from \"react\";\r\nimport { moviesApi } from \"../../api\";\r\nimport HomePresenter from \"./HomePresenter\";\r\n\r\n// Container의 역할 : Application에서 사용되어지는 기능(함수), 상태(state), 이벤트 등을\r\n// 구현 하고, Presenter에 전달\r\n\r\nexport default class extends React.Component {\r\n  // 클래스형 컴포넌트에서 state 만들기\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  // constructor : 클래스 생성자\r\n  //   생성자의 매개변수로 부모 컴포넌트의 props가 들어온다.\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // 컴포넌트가 부모 컴포넌트에 마운트 됐을 때 호출되는 함수\r\n  // useEffect(()=>{}, [])와 같다.\r\n\r\n  // useEffect 에서의 비동기처리와는 다르게, 클래스형 컴포넌트의 componentDidMount에서의\r\n  // 비동기 처리는 앞에 async 키워드를 붙여주면 된다\r\n  async componentDidMount() {\r\n    try {\r\n      // data -> results에 원하는 내용이 있었음\r\n      // { data : { results : [{},{},{}...]} }\r\n\r\n      // data안에 있는 results에 들어있는 값을 nowPlaying 변수에 넣겠다.\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesApi.nowPlaying();\r\n\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"영화 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 함수형 컴포넌트에서 return에 해당된다.\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n","D:\\data-science\\bit-react\\bitflix\\src\\routes\\Search\\SearchContainer.js",["102","103"],"import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false,\r\n  };\r\n\r\n  // submit\r\n  handleSubmit = (event) => {\r\n    // form에서 submit이 작동은 하는데, 원래 하고자 했던 이벤트를 취소한다.\r\n    event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  // update -> onChange에서 일어날 이벤트\r\n  updateTerm = (event) => {\r\n    const {\r\n      target: { value: searchTerm },\r\n    } = event;\r\n\r\n    this.setState({ searchTerm });\r\n  };\r\n\r\n  // search -> 검색어를 넣은 api 호출\r\n  //  이벤트가 일어났을 때 비동기로 호출\r\n  searchByTerm = async () => {\r\n    // 1. 검색어 가져오기\r\n    const { searchTerm } = this.state;\r\n\r\n    // 2. loading 설정하기\r\n    this.setState({ loading: true });\r\n\r\n    // 3. 실제 api 호출하기\r\n    // 데이터의 응답 형태 : { data : { results : [ {}, {}, {}, ...] } }\r\n    try {\r\n      // moviesApi.search -> movieResults에 담기\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n\r\n      // tvApi.search -> tvResults에 담기\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n\r\n      this.setState({ movieResults, tvResults });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"결과를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // 함수형 컴포넌트에서 return에 해당된다.\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, error, loading } = this.state;\r\n\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        error={error}\r\n        loading={loading}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","D:\\data-science\\bit-react\\bitflix\\src\\components\\Message.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\api.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\components\\Loader.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\TV\\TvPresenter.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\Home\\HomePresenter.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\Search\\SearchPresenter.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\components\\Poster.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\components\\Section.js",[],"D:\\data-science\\bit-react\\bitflix\\src\\routes\\Detail\\DetailPresenter.js",["104"],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":11,"column":1,"nodeType":"111","endLine":27,"endColumn":3},{"ruleId":"109","severity":1,"message":"112","line":5,"column":1,"nodeType":"111","endLine":67,"endColumn":2},{"ruleId":"109","severity":1,"message":"112","line":5,"column":1,"nodeType":"111","endLine":57,"endColumn":2},{"ruleId":"109","severity":1,"message":"112","line":8,"column":1,"nodeType":"111","endLine":77,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":20,"column":3,"nodeType":"115","messageId":"116","endLine":22,"endColumn":4},{"ruleId":"109","severity":1,"message":"112","line":5,"column":1,"nodeType":"111","endLine":88,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":68,"column":3,"nodeType":"115","messageId":"116","endLine":70,"endColumn":4},{"ruleId":"117","severity":1,"message":"118","line":7,"column":10,"nodeType":"119","messageId":"120","endLine":7,"endColumn":21},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous class","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'AiFillHeart' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]